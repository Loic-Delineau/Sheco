#!/bin/bash
#
# Author: LoÃ¯c Delineau
# Date: December 2023

# DESCRIPTION OF SCRIPT ---------------------------------------------
# Sheco is a script that will treat user keypressed as event triggers
# which will call a list of predefined commands (in setup.txt) 
# 1. Downside to this program is that you can only trigger one action
#    at a time because Sheco stops reading user input after 1 character
# 2. Dowside to this program is that when you use ROS, every keypress
#    leads to a new node being launched which takes forever

# $(tput setaf)    COLOUR CODE:
# 1 RED
# 2 GREEN
# 3 YELLOW
# 4
# 5
# 6
# 7 WHITE

# FUNCTIONS ==========================================================================
# Display setup.txt
display_setuptxt() {
	echo ""
	echo ""
	echo "setup.txt"
	echo "---------------------------------------"
	cat setup.txt
	echo "---------------------------------------"
	echo ""
	
	# Display possible actions
	display_menu
	
	# Treat user-input
	sheco_menu		
}

# Display User Actions in Menu
display_menu() {
	echo "$(tput setaf 2)Actions:$(tput setaf 7) Start Sheco     -  type 's'"
	echo "         View setup.txt  -  type 'v' "
	echo ""
}

# Display keybindings for user:
display_keybindings() {
	echo "- - - - - Keybindings - - - - - "
	echo "| To move X,      press z or s |"
	echo "| To move Y,      press q or d |"
	echo "| To move Z,      press r or f |"
	echo "| To move thetaR, press j or l |"
	echo "| To move thetaP, press i or k |"
	echo "- - - - - - - - - - - - - - - - "
	echo ""
}

# Display no key pressed
display_none() {
	echo "> z: "
	echo "> s: "
	echo "> q: "
	echo "> d: "
	echo ""
}

# Display z pressed
display_z() {
	echo "> z: pressed"
	echo "> s: "
	echo "> q: "
	echo "> d: "
	echo ""
}

# Display s pressed
display_s() {
	echo "> z: "
	echo "> s: pressed"
	echo "> q: "
	echo "> d: "
	echo ""
}

# Display q pressed
display_q() {
	echo "> z: "
	echo "> s: "
	echo "> q: pressed"
	echo "> d: "
	echo ""
}

# Display d pressed
display_d() {
	echo "> z: "
	echo "> s: "
	echo "> q: "
	echo "> d: pressed"
	echo ""
}

# Display Menu and Wait for User Input
sheco_menu() {

	# Failsafe for wrong value inputted
	fail="1"

	while [[ "$fail" == "1" ]]; do

		# Read 1 input char
		echo -n "> "
		read -n 1 -r cmd < /dev/tty	
		
		# Keyboard input checking
		if [[ "$cmd" == "s" ]]; then
			fail="0"
			echo ""
		elif [[ "$cmd" == "v" ]]; then
			display_setuptxt
			fail="0"
			echo ""
		else 
			echo -e "\nUnknown key..."	
		fi
	done

}



# WELCOME SCREEN ===========================================================
# Display logoscript
clear && echo "" && bash ./assets/logoscript.sh  && echo ""
sheco_menu

# SETTING UP USER'S COMPUTER ========================================================
echo "Welcome to the Sheco"
echo ""

# Setting up user's KEYBOARD LAYOUT 
#Xp="z"
#Yp="q"


# PARSING setup.txt ==================================================================
# Yeeting old directory
if [ -d "./parser" ]; then
	rm -rf parser
fi

# Making clean directory
mkdir parser

# Copying setup.txt into new directory and moving there
cp setup.txt ./parser
cd parser

# a.txt ----------
# Saving the first commands into a.txt after removal of blank lines
# saving the rest into temp.txt
cat setup.txt | awk '/./{p=1}p' | awk 'BEGIN {output="a.txt"} /^$/ {output="temp.txt"; end} {print > output}'

# Removing all the comments from the file

sed '/#/d' a.txt > atemp.txt
mv atemp.txt a.txt

# Adding Shebangs to the file to make it an executable script
echo -e "#! /bin/bash\n$(cat a.txt)" > a.txt

# b.txt ----------
cat temp.txt | awk '/./{p=1}p' | awk 'BEGIN {output="b.txt"} /^$/ {output="temp.txt"; end} {print > output}'
sed '/#/d' b.txt > btemp.txt
mv btemp.txt b.txt
echo -e "#! /bin/bash\n$(cat b.txt)" > b.txt

# c.txt ----------
cat temp.txt | awk '/./{p=1}p' | awk 'BEGIN {output="c.txt"} /^$/ {output="temp.txt"; end} {print > output}'
sed '/#/d' c.txt > ctemp.txt
mv ctemp.txt c.txt
echo -e "#! /bin/bash\n$(cat c.txt)" > c.txt

# d.txt ----------
cat temp.txt | awk '/./{p=1}p' | awk 'BEGIN {output="d.txt"} /^$/ {output="temp.txt"; end} {print > output}'
sed '/#/d' d.txt > dtemp.txt
mv dtemp.txt d.txt
echo -e "#! /bin/bash\n$(cat d.txt)" > d.txt

# Renaming all the scripts to the user's keyboard
mv a.txt z.txt
mv b.txt s.txt
mv c.txt q.txt
#mv d.txt d.txt


# Moving back up to Sheco root directory
cd ..

# DEFINITIONS ========================================================================






# Starting Controller
echo "Press on any key to start the the controller" 

# STARTS INFINITE LOOP ===============================================================
while true; do
	
	# THROW AWAY INPUT CHARACTERS THAT ARE INPUTTED TOO FAST ---------------------
	for ((i = 0 ; i < 10; i = i+1)); do
		# Read all the user input (from current terminal (tty) 
		# and timeout after 0.001 secods)
		read -t 0.001 -r dir < /dev/tty
		# Throw away that value and never use it
		
		# Wait a total of i*sleep	
		sleep 0.01	# = 10Hz
	done


	# READ USER INPUT -------------------------------------------------------------
	# Read from current terminal (tty) and return after 1 char
	read -n 1 -r dir < /dev/tty	

	# Keyboard input checking
	if [[ "$dir" == "z" ]]; then 
		
		# Clear screen
		clear
				
		# Display pressed keys on terminal for user
		display_keybindings
		display_z
	
		# Execute User Command
		echo "Running command ... wait"
		bash ./parser/z.txt

	elif [[ "$dir" == "s" ]]; then
		clear
		display_keybindings	
		display_s	
		echo "Running command ... wait"
		bash ./parser/s.txt
	elif [[ "$dir" == "q" ]]; then
		clear
		display_keybindings	
		display_q	
		echo "Running command ... wait"
		bash ./parser/q.txt
	elif [[ "$dir" == "d" ]]; then
		clear
		display_keybindings	
		display_d	
		echo "Running command ... wait"
		bash ./parser/d.txt
	else
		clear
		display_keybindings
		display_none
		echo "$(tput setaf 1)This key is not recognized!!$(tput setaf 7)"
		sleep 0.5	
	fi
	


	# Failsave to avoid arm runaway	
	dir=""
		
	# Clear Screen and previously pressed keys
	clear
	display_keybindings	
	display_none
done


