#!/bin/bash
#
# Author: Lo√Øc Delineau
# Date: December 2023

# DESCRIPTION OF SCRIPT ---------------------------------------------
# Sheco is a script that will treat user keypressed as event triggers
# which will call a list of predefined commands (in setup.txt) 
# 1. Downside to this program is that you can only trigger one action
#    at a time because Sheco stops reading user input after 1 character


# $(tput setaf)    COLOUR CODE:
# 1 RED
# 2 GREEN
# 3 YELLOW
# 4
# 5
# 6
# 7 WHITE


# SETTING UP USER'S COMPUTER ========================================================
echo "Welcome to the Sheco"
echo ""

# Setting up user's KEYBOARD LAYOUT ------------------------------------
#Xp="z"
#Yp="q"


# Launching Nodes for 100 seconds
ros2 topic pub /microver/velocity/x std_msgs/msg/Bool "{data: 'false'}" -1 -w 0 --keep-alive 100

# PARSING setup.txt ==================================================================



# DEFINITIONS ========================================================================



# FUNCTIONS ==========================================================================
display_position() {
	echo "========== POSITION IN SPACE =========="
}


# Starting Controller
echo "Press on any key to start the the controller" 

# STARTS INFINITE LOOP ===============================================================
while true; do
	
	# THROW AWAY INPUT CHARACTERS THAT ARE INPUTTED TOO FAST ---------------------
	for ((i = 0 ; i < 10; i = i+1)); do
		# Read all the user input (from current terminal (tty) 
		# and timeout after 0.001 secods)
		read -t 0.001 -r dir < /dev/tty
		# Throw away that value and never use it
		
		# Wait a total of i*sleep	
		sleep 0.01	# = 10Hz
	done


	# READ USER INPUT -------------------------------------------------------------
	# Read from current terminal (tty) and return after 1 char
	read -n 1 -r dir < /dev/tty	

	# Keyboard input checking
	if [[ "$dir" == "z" ]]; then 
		
		# Clear screen
		clear
		
		# Display position on terminal for user
		display_position
echo "z was pressed"

		# Execute User Command
ros2 topic pub /microver/velocity/x std_msgs/msg/Bool \"{data: 'true'}\" -1 -w 0

# This still takes too long, I think this terminal solution will never work smoothly
# with ROS as it take too long to spin up a node to publish a message on a topic.
# It makes more sense to have a dedicated topic always alive and pumping out the keyboard info
# ...

	elif [[ "$dir" == "s" ]]; then
		clear
		X=$((X - $step_size))
		display_position
	elif [[ "$dir" == "$Yp" ]]; then
		clear
		Y=$((Y + $step_size))
		display_position
	elif [[ "$dir" == "d" ]]; then
		clear
		Y=$((Y - $step_size))
		display_position
	elif [[ "$dir" == "r" ]]; then
		clear
		Z=$((Z + $step_size))
		display_position
	elif [[ "$dir" == "f" ]]; then
		clear
		Z=$((Z - $step_size))
		display_position
	elif [[ "$dir" == "i" ]]; then
		clear
		thetaP=$((thetaP + $step_size))
		display_position
	elif [[ "$dir" == "k" ]]; then
		clear
		thetaP=$((thetaP - $step_size))
		display_position
	elif [[ "$dir" == "j" ]]; then
		clear
		thetaR=$((thetaR - $step_size))
		display_position
	elif [[ "$dir" == "l" ]]; then
		clear
		thetaR=$((thetaR + $step_size))
		display_position
	else
		clear
		display_position
		echo "$(tput setaf 1)This key is not recognized!!$(tput setaf 7)"
	
	fi
	

	# Display keybindings for user:
	echo ""
	echo ""
	echo "To move X,      press z or s"
	echo "To move Y,      press s or d"
	echo "To move Z,      press r or f"
	echo "To move thetaR, press j or l"
	echo "To move thetaP, press i or k"


	# Send those variables over the ROS Network ----------------------------

	# Failsave to avoid arm runaway	
	dir=""
done


